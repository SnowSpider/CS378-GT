// HostGameState::enter
// Connect : begin
    
    
    // Create a room
    SDL_Init(SDL_INIT_EVERYTHING);
    /*
    TCPsocket sd, csd; // Socket descriptor, Client socket descriptor 
    IPaddress ip, *remoteIP;
    int quit, quit2;
    char buffer[512];
    */
    
    if (SDLNet_Init() < 0)
    {
	    fprintf(stderr, "SDLNet_Init: %s\n", SDLNet_GetError());
	    //exit(EXIT_FAILURE);
    }

    // Resolving the host using NULL make network interface to listen 
    if (SDLNet_ResolveHost(&ip, NULL, 1234) < 0)
    {
	    fprintf(stderr, "SDLNet_ResolveHost: %s\n", SDLNet_GetError());
	    //exit(EXIT_FAILURE);
    }

    // Open a connection with the IP provided (listen on the host's port) 
    if (!(sd = SDLNet_TCP_Open(&ip)))
    {
	    fprintf(stderr, "SDLNet_TCP_Open: %s\n", SDLNet_GetError());
	    //exit(EXIT_FAILURE);
    }
    
    // Wait for a connection, send data and term 
    quit = 0;
    
    while(true){
        // This check the sd if there is a pending connection.
        // If there is one, accept that, and open a new socket for communicating 
        if ((csd = SDLNet_TCP_Accept(sd)))
        {
	        // Now we can communicate with the client using csd socket
	        // sd will remain opened waiting other connections 

	        // Get the remote address 
	        if ((remoteIP = SDLNet_TCP_GetPeerAddress(csd))){
	            // Print the address, converting in the host format 
		        printf("Host connected: %x %d\n", SDLNet_Read32(&remoteIP->host), SDLNet_Read16(&remoteIP->port));
		        break;
	        }
	        else{
                fprintf(stderr, "SDLNet_TCP_GetPeerAddress: %s\n", SDLNet_GetError());
            }
        }
    }
        
    
    // Connect : end
    
    
// ClientGameState::enter

// Connect : begin
    
    
    // targetAddress.getText()
    // connect to the targetAddress (string)
    SDL_Init(SDL_INIT_EVERYTHING);
    /*
    IPaddress ip;		// Server address 
    TCPsocket sd;		// Socket descriptor 
    int quit, len;
    char buffer[512];    
    string targetAddress;
    */
    
    ifstream myfile ("targetAddress.txt");
    if (myfile.is_open()) {
        while ( myfile.good() ) {
            getline (myfile,targetAddress);
            cout << targetAddress << endl;
        }
        myfile.close();
    }
    else cout << "Unable to open file"; 

    
    // Simple parameter checking 
 
    if (SDLNet_Init() < 0)
    {
	    fprintf(stderr, "SDLNet_Init: %s\n", SDLNet_GetError());
	    //exit(EXIT_FAILURE);
    }
 
    // Resolve the host we are connecting to 
    //if (SDLNet_ResolveHost(&ip, targetAddress.getText().c_str(), 1234) < 0)
    if (SDLNet_ResolveHost(&ip, targetAddress.c_str(), 1234) < 0)
    {
	    fprintf(stderr, "SDLNet_ResolveHost: %s\n", SDLNet_GetError());
	    //exit(EXIT_FAILURE);
    }
    else{
	    cout << targetAddress << endl;    	
    }
 
    // Open a connection with the IP provided (listen on the host's port) 
    if (!(sd = SDLNet_TCP_Open(&ip)))
    {
	    fprintf(stderr, "SDLNet_TCP_Open: %s\n", SDLNet_GetError());
	    //exit(EXIT_FAILURE);
    }
 
    // Send messages
    /*
    quit = 0;
    while (!quit)
    {
	    printf("Write something:\n>");
	    scanf("%s", buffer);
 
	    len = strlen(buffer) + 1;
	    if (SDLNet_TCP_Send(sd, (void *)buffer, len) < len) // you can send anything here
	    {
		    fprintf(stderr, "SDLNet_TCP_Send: %s\n", SDLNet_GetError());
		    //exit(EXIT_FAILURE);
	    }
 
	    if(strcmp(buffer, "exit") == 0)
		    quit = 1;
	    if(strcmp(buffer, "quit") == 0)
		    quit = 1;
    }
    */
    /*
    SDLNet_TCP_Close(sd);
    SDLNet_Quit();
    */
    // Connect : end
    
