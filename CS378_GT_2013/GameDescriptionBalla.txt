Project 2 Week 1 Description

Daniel Moreno drm2472 drmoreno
Wonjun Lee wl4337 wlee
Howard Fu hef79 howardfu

Game Design:
A simple game based off of racquetball.

The basic idea is to keep the ball within a box by preventing the ball to exit the box through a single open face. The paddle that will be used for this game is a simple square. 

A single game will start out by the ball floating in the center of the box and begin when a player clicks the mouse. When this occurs the ball will be sent in a random direction away from the player to start the game. In the cornor of the screen, a single GUI score counter will exist that increments the value by 1 every time the paddle hits the ball. The paddle will be controlled by the mouse movement of the player, bounded by the width and height of the box. Every time the ball meets the paddle and confirms that it actually hit, the ball bounces back in a perfectly elastic collision just as it were to hit a flat wall. If the ball is missed and gets past the paddle, the ball will return to its original position, the game will end, at this time a Game Over GUI screen will appear, stating the players final score and having a button that offers to Play Again. If the player chooses to play again, the score and enviroment are reset to the original state. For difficulty purposes, every time the ball hits the paddle, the speed of the ball will be increased ever so slightly so that the game will increase in difficulty over time.

The ball will look like a blue racquetball ball, while the room will be composed of walls with a color contrasting that of the ball, along with a wooden textured floor.

The camera will be positioned behind the paddle some distance so that the player may see the entire playing field in their screen.

The ball will also cast a shadow caused by a directional light from the ceiling to aid the depth perception. 

As far as sound goes, we will have different sounds depending on where the ball 'hits'.


For Coding purposes: 
The initial lights and entities (wall, ball,paddle, etc) will be set up in the scenegraph frame. Were going to set up the GUI's before hand and display them as needed but since none of us have any current experience with GUIs we'll figure out exactly how/where to do this once we begin. Individual aspects of the application will be seperated and brought together by the scenegraph creation and framelistener. This seperation of concerns will also aid to the division of labor. The rendering loop and the simulation loop will be the same unless it somehow poses a problem with fps.  Within this loop, the ball will be checked for collisions and respond accordingly. For instance in the case of the crossing the empty face plane, the simulator will check if the ball has passed over the current postion of the  paddle; if this is so, the velocity is increased, the ball is reflected, and a sound is induced. 

Division of Labor: 
Most of this work will be done together in the lab as well as being shared between each other on a private repository in GitHub. Through, as far as the main conerns of creating the scene, processing the loop, and developing the GUIs, these will be divided. Due to the infrastructure of our code, which will split up most processes between individual '.h' files, most work done can be in parallel of other things. As of right now Howard will be doing Scenegraph management, while Wonjun and Daniel work on the simulation and GUI stuff in pair programming fashion.


Tada!

On a side note, most of the stuff written here is just the basic of the basic stuff. If and only if we get this stuff done, then we'll try to add different features to the game. For instance considering the movement of the paddle when calculating the direction the ball is flung, a more advanced scoring system, and changing the sounds of the walls/paddles as the game advances.

Right now I'm calling it Ball'a.
